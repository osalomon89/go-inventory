basePath: /
consumes:
    - application/json
definitions:
    Book:
        properties:
            author:
                description: The Author of a book
                example: Some name
                type: string
                x-go-name: Author
            created_at:
                description: The date of creation
                example: 2022-10-01T22:11:33
                format: date-time
                type: string
                x-go-name: CreatedAt
            id:
                description: The ID of a book
                example: 12345
                format: uint64
                type: integer
                x-go-name: ID
            isbn:
                description: The ISBN of a book
                example: 123errtr5789
                type: string
                x-go-name: Isbn
            price:
                description: The Price of a book
                example: 5000
                format: int64
                type: integer
                x-go-name: Price
            stock:
                description: The number of books
                example: 50
                format: int64
                type: integer
                x-go-name: Stock
            title:
                description: The Title of a book
                example: The tittle book
                type: string
                x-go-name: Title
            updated_at:
                description: The date of update
                example: 2022-10-01T22:11:33
                format: date-time
                type: string
                x-go-name: UpdatedAt
        type: object
        x-go-package: github.com/osalomon89/go-inventory/internal/domain
    ResponseAllInfo:
        properties:
            data:
                items:
                    $ref: '#/definitions/Book'
                type: array
                x-go-name: Data
            status:
                format: int64
                type: integer
                x-go-name: Status
        type: object
        x-go-package: github.com/osalomon89/go-inventory/internal/server
    ResponseDeleteInfo:
        properties:
            data:
                type: string
                x-go-name: Data
            status:
                format: int64
                type: integer
                x-go-name: Status
        type: object
        x-go-package: github.com/osalomon89/go-inventory/internal/server
    ResponseError:
        properties:
            data:
                description: The Response Data
                example: error getting book
                type: string
                x-go-name: Data
            status:
                description: The Response Status code
                example: 400
                format: int64
                type: integer
                x-go-name: Status
        type: object
        x-go-package: github.com/osalomon89/go-inventory/internal/server
    ResponseInfo:
        properties:
            data:
                $ref: '#/definitions/Book'
            status:
                description: The Response Status code
                example: 200
                format: int64
                type: integer
                x-go-name: Status
        type: object
        x-go-package: github.com/osalomon89/go-inventory/internal/server
host: localhost:5000
info:
    description: API to create, update and delete books.
    license:
        name: MIT
        url: http://opensource.org/licenses/MIT
    title: Inventory APP.
    version: "1.0"
paths:
    /books:
        get:
            consumes:
                - application/json
            description: This will show all available books by default.
            operationId: getBooks
            parameters:
                - description: maximum numnber of results to return
                  format: int32
                  in: query
                  name: limit
                  type: integer
                - description: number of results to skip
                  format: int32
                  in: query
                  name: offset
                  type: integer
                - description: isbn number
                  in: query
                  name: isbn
                  type: string
            produces:
                - application/json
            responses:
                "200":
                    description: ResponseAllInfo
                    schema:
                        $ref: '#/definitions/ResponseAllInfo'
                "400":
                    description: ResponseError
                    schema:
                        $ref: '#/definitions/ResponseError'
            schemes:
                - http
                - https
            summary: Lists books filtered by some parameters.
            tags:
                - getBooks
        post:
            consumes:
                - application/json
            description: This will create a book.
            operationId: createBook
            parameters:
                - description: body with book parameters
                  in: body
                  name: Body
                  required: true
            produces:
                - application/json
            responses:
                "200":
                    description: ResponseInfo
                    schema:
                        $ref: '#/definitions/ResponseInfo'
                "400":
                    description: ResponseError
                    schema:
                        $ref: '#/definitions/ResponseError'
            schemes:
                - http
                - https
            summary: Create book.
            tags:
                - createBook
    /books/{id}:
        get:
            operationId: getBookByID
            responses:
                "200":
                    description: ResponseInfo
                    schema:
                        $ref: '#/definitions/ResponseInfo'
                "400":
                    description: ResponseError
                    schema:
                        $ref: '#/definitions/ResponseError'
            summary: This is the description for getting a book by its ID. Which can be longer.
            tags:
                - getBookByID
produces:
    - application/json
schemes:
    - http
    - https
swagger: "2.0"
